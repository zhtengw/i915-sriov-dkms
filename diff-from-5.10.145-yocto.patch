diff -Naur linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/display/intel_acpi.c i915-sriov-5.15/drivers/gpu/drm/i915/display/intel_acpi.c
--- linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/display/intel_acpi.c	2022-11-07 16:35:36.000000000 +0800
+++ i915-sriov-5.15/drivers/gpu/drm/i915/display/intel_acpi.c	2023-04-03 16:24:57.788438372 +0800
@@ -285,49 +285,3 @@
 	}
 	drm_connector_list_iter_end(&conn_iter);
 }
-
-/* NOTE: The connector order must be final before this is called. */
-void intel_acpi_assign_connector_fwnodes(struct drm_i915_private *i915)
-{
-	struct drm_connector_list_iter conn_iter;
-	struct drm_device *drm_dev = &i915->drm;
-	struct fwnode_handle *fwnode = NULL;
-	struct drm_connector *connector;
-	struct acpi_device *adev;
-
-	drm_connector_list_iter_begin(drm_dev, &conn_iter);
-	drm_for_each_connector_iter(connector, &conn_iter) {
-		/* Always getting the next, even when the last was not used. */
-		fwnode = device_get_next_child_node(drm_dev->dev, fwnode);
-		if (!fwnode)
-			break;
-
-		switch (connector->connector_type) {
-		case DRM_MODE_CONNECTOR_LVDS:
-		case DRM_MODE_CONNECTOR_eDP:
-		case DRM_MODE_CONNECTOR_DSI:
-			/*
-			 * Integrated displays have a specific address 0x1f on
-			 * most Intel platforms, but not on all of them.
-			 */
-			adev = acpi_find_child_device(ACPI_COMPANION(drm_dev->dev),
-						      0x1f, 0);
-			if (adev) {
-				connector->fwnode =
-					fwnode_handle_get(acpi_fwnode_handle(adev));
-				break;
-			}
-			fallthrough;
-		default:
-			connector->fwnode = fwnode_handle_get(fwnode);
-			break;
-		}
-	}
-	drm_connector_list_iter_end(&conn_iter);
-	/*
-	 * device_get_next_child_node() takes a reference on the fwnode, if
-	 * we stopped iterating because we are out of connectors we need to
-	 * put this, otherwise fwnode is NULL and the put is a no-op.
-	 */
-	fwnode_handle_put(fwnode);
-}
diff -Naur linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/display/intel_acpi.h i915-sriov-5.15/drivers/gpu/drm/i915/display/intel_acpi.h
--- linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/display/intel_acpi.h	2022-11-07 16:35:36.000000000 +0800
+++ i915-sriov-5.15/drivers/gpu/drm/i915/display/intel_acpi.h	2023-04-03 16:24:57.788438372 +0800
@@ -13,7 +13,6 @@
 void intel_unregister_dsm_handler(void);
 void intel_dsm_get_bios_data_funcs_supported(struct drm_i915_private *i915);
 void intel_acpi_device_id_update(struct drm_i915_private *i915);
-void intel_acpi_assign_connector_fwnodes(struct drm_i915_private *i915);
 #else
 static inline void intel_register_dsm_handler(void) { return; }
 static inline void intel_unregister_dsm_handler(void) { return; }
@@ -21,8 +20,6 @@
 void intel_dsm_get_bios_data_funcs_supported(struct drm_i915_private *i915) { return; }
 static inline
 void intel_acpi_device_id_update(struct drm_i915_private *i915) { return; }
-static inline
-void intel_acpi_assign_connector_fwnodes(struct drm_i915_private *i915) { return; }
 #endif /* CONFIG_ACPI */
 
 #endif /* __INTEL_ACPI_H__ */
diff -Naur linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/display/intel_ddi.c i915-sriov-5.15/drivers/gpu/drm/i915/display/intel_ddi.c
--- linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/display/intel_ddi.c	2022-11-07 16:35:36.000000000 +0800
+++ i915-sriov-5.15/drivers/gpu/drm/i915/display/intel_ddi.c	2023-04-03 16:52:46.432120806 +0800
@@ -1335,20 +1335,13 @@
 	return 0;
 }
 
-static int intel_ddi_dp_level(struct intel_dp *intel_dp,
-			      const struct intel_crtc_state *crtc_state,
-			      int lane)
+static int intel_ddi_dp_level(struct intel_dp *intel_dp, int lane)
 {
 	u8 train_set = intel_dp->train_set[lane];
+	u8 signal_levels = train_set & (DP_TRAIN_VOLTAGE_SWING_MASK |
+					DP_TRAIN_PRE_EMPHASIS_MASK);
 
-	if (intel_dp_is_uhbr(crtc_state)) {
-		return train_set & DP_TX_FFE_PRESET_VALUE_MASK;
-	} else {
-		u8 signal_levels = train_set & (DP_TRAIN_VOLTAGE_SWING_MASK |
-						DP_TRAIN_PRE_EMPHASIS_MASK);
-
-		return translate_signal_level(intel_dp, signal_levels);
-	}
+	return translate_signal_level(intel_dp, signal_levels);
 }
 
 int intel_ddi_level(struct intel_encoder *encoder,
@@ -1366,8 +1359,7 @@
 	if (intel_crtc_has_type(crtc_state, INTEL_OUTPUT_HDMI))
 		level = intel_ddi_hdmi_level(encoder, trans);
 	else
-		level = intel_ddi_dp_level(enc_to_intel_dp(encoder), crtc_state,
-					   lane);
+		level = intel_ddi_dp_level(enc_to_intel_dp(encoder), lane);
 
 	if (drm_WARN_ON_ONCE(&i915->drm, level >= n_entries))
 		level = n_entries - 1;
diff -Naur linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/display/intel_display.c i915-sriov-5.15/drivers/gpu/drm/i915/display/intel_display.c
--- linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/display/intel_display.c	2022-11-07 16:35:36.000000000 +0800
+++ i915-sriov-5.15/drivers/gpu/drm/i915/display/intel_display.c	2023-04-03 16:24:57.788438372 +0800
@@ -10887,7 +10887,6 @@
 
 	drm_modeset_lock_all(dev);
 	intel_modeset_setup_hw_state(dev, dev->mode_config.acquire_ctx);
-	intel_acpi_assign_connector_fwnodes(i915);
 	drm_modeset_unlock_all(dev);
 
 	for_each_intel_crtc(dev, crtc) {
diff -Naur linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/display/intel_dp.c i915-sriov-5.15/drivers/gpu/drm/i915/display/intel_dp.c
--- linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/display/intel_dp.c	2022-11-07 16:35:36.000000000 +0800
+++ i915-sriov-5.15/drivers/gpu/drm/i915/display/intel_dp.c	2023-04-03 16:45:46.505975348 +0800
@@ -145,9 +145,6 @@
 		return;
 	}
 
-	/*
-	 * Sink rates for 8b/10b.
-	 */
 	max_rate = drm_dp_bw_code_to_link_rate(intel_dp->dpcd[DP_MAX_LINK_RATE]);
 	max_lttpr_rate = drm_dp_lttpr_max_link_rate(intel_dp->lttpr_common_caps);
 	if (max_lttpr_rate)
@@ -171,21 +168,6 @@
 		drm_dp_dpcd_readb(&intel_dp->aux,
 				  DP_128B132B_SUPPORTED_LINK_RATES, &uhbr_rates);
 
-		if (drm_dp_lttpr_count(intel_dp->lttpr_common_caps)) {
-			/* We have a repeater */
-			if (intel_dp->lttpr_common_caps[0] >= 0x20 &&
-			    intel_dp->lttpr_common_caps[DP_MAIN_LINK_CHANNEL_CODING_PHY_REPEATER -
-							DP_LT_TUNABLE_PHY_REPEATER_FIELD_DATA_STRUCTURE_REV] &
-			    DP_PHY_REPEATER_128B132B_SUPPORTED) {
-				/* Repeater supports 128b/132b, valid UHBR rates */
-				uhbr_rates &= intel_dp->lttpr_common_caps[DP_PHY_REPEATER_128B132B_RATES -
-									  DP_LT_TUNABLE_PHY_REPEATER_FIELD_DATA_STRUCTURE_REV];
-			} else {
-				/* Does not support 128b/132b */
-				uhbr_rates = 0;
-			}
-		}
-
 		if (uhbr_rates & DP_UHBR10)
 			intel_dp->sink_rates[i++] = 1000000;
 		if (uhbr_rates & DP_UHBR13_5)
@@ -2468,8 +2450,6 @@
 static void intel_edp_mso_init(struct intel_dp *intel_dp)
 {
 	struct drm_i915_private *i915 = dp_to_i915(intel_dp);
-	struct intel_connector *connector = intel_dp->attached_connector;
-	struct drm_display_info *info = &connector->base.display_info;
 	u8 mso;
 
 	if (intel_dp->edp_dpcd[0] < DP_EDP_14)
@@ -2488,9 +2468,8 @@
 	}
 
 	if (mso) {
-		drm_dbg_kms(&i915->drm, "Sink MSO %ux%u configuration, pixel overlap %u\n",
-			    mso, drm_dp_max_lane_count(intel_dp->dpcd) / mso,
-			    info->mso_pixel_overlap);
+		drm_dbg_kms(&i915->drm, "Sink MSO %ux%u configuration\n",
+			    mso, drm_dp_max_lane_count(intel_dp->dpcd) / mso);
 		if (!HAS_MSO(i915)) {
 			drm_err(&i915->drm, "No source MSO support, disabling\n");
 			mso = 0;
@@ -2498,7 +2477,7 @@
 	}
 
 	intel_dp->mso_link_count = mso;
-	intel_dp->mso_pixel_overlap = mso ? info->mso_pixel_overlap : 0;
+	intel_dp->mso_pixel_overlap = 0; /* FIXME: read from DisplayID v2.0 */
 }
 
 static bool
@@ -4667,17 +4646,6 @@
 	return intel_modeset_synced_crtcs(state, conn);
 }
 
-static void intel_dp_oob_hotplug_event(struct drm_connector *connector)
-{
-	struct intel_encoder *encoder = intel_attached_encoder(to_intel_connector(connector));
-	struct drm_i915_private *i915 = to_i915(connector->dev);
-
-	spin_lock_irq(&i915->irq_lock);
-	i915->hotplug.event_bits |= BIT(encoder->hpd_pin);
-	spin_unlock_irq(&i915->irq_lock);
-	queue_delayed_work(system_wq, &i915->hotplug.hotplug_work, 0);
-}
-
 static const struct drm_connector_funcs intel_dp_connector_funcs = {
 	.force = intel_dp_force,
 	.fill_modes = drm_helper_probe_single_connector_modes,
@@ -4688,7 +4656,6 @@
 	.destroy = intel_connector_destroy,
 	.atomic_destroy_state = drm_atomic_helper_connector_destroy_state,
 	.atomic_duplicate_state = intel_digital_connector_duplicate_state,
-	.oob_hotplug_event = intel_dp_oob_hotplug_event,
 };
 
 static const struct drm_connector_helper_funcs intel_dp_connector_helper_funcs = {
diff -Naur linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/display/intel_dp_link_training.c i915-sriov-5.15/drivers/gpu/drm/i915/display/intel_dp_link_training.c
--- linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/display/intel_dp_link_training.c	2022-11-07 16:35:36.000000000 +0800
+++ i915-sriov-5.15/drivers/gpu/drm/i915/display/intel_dp_link_training.c	2023-04-03 16:52:46.432120806 +0800
@@ -304,32 +304,11 @@
 	return !intel_dp_phy_is_downstream_of_source(intel_dp, dp_phy);
 }
 
-/* 128b/132b */
-static u8 intel_dp_get_lane_adjust_tx_ffe_preset(struct intel_dp *intel_dp,
-						 const struct intel_crtc_state *crtc_state,
-						 enum drm_dp_phy dp_phy,
-						 const u8 link_status[DP_LINK_STATUS_SIZE],
-						 int lane)
-{
-	u8 tx_ffe = 0;
-
-	if (has_per_lane_signal_levels(intel_dp, dp_phy)) {
-		lane = min(lane, crtc_state->lane_count - 1);
-		tx_ffe = drm_dp_get_adjust_tx_ffe_preset(link_status, lane);
-	} else {
-		for (lane = 0; lane < crtc_state->lane_count; lane++)
-			tx_ffe = max(tx_ffe, drm_dp_get_adjust_tx_ffe_preset(link_status, lane));
-	}
-
-	return tx_ffe;
-}
-
-/* 8b/10b */
-static u8 intel_dp_get_lane_adjust_vswing_preemph(struct intel_dp *intel_dp,
-						  const struct intel_crtc_state *crtc_state,
-						  enum drm_dp_phy dp_phy,
-						  const u8 link_status[DP_LINK_STATUS_SIZE],
-						  int lane)
+static u8 intel_dp_get_lane_adjust_train(struct intel_dp *intel_dp,
+					 const struct intel_crtc_state *crtc_state,
+					 enum drm_dp_phy dp_phy,
+					 const u8 link_status[DP_LINK_STATUS_SIZE],
+					 int lane)
 {
 	u8 v = 0;
 	u8 p = 0;
@@ -361,20 +340,6 @@
 	return v | p;
 }
 
-static u8 intel_dp_get_lane_adjust_train(struct intel_dp *intel_dp,
-					 const struct intel_crtc_state *crtc_state,
-					 enum drm_dp_phy dp_phy,
-					 const u8 link_status[DP_LINK_STATUS_SIZE],
-					 int lane)
-{
-	if (intel_dp_is_uhbr(crtc_state))
-		return intel_dp_get_lane_adjust_tx_ffe_preset(intel_dp, crtc_state,
-							      dp_phy, link_status, lane);
-	else
-		return intel_dp_get_lane_adjust_vswing_preemph(intel_dp, crtc_state,
-							       dp_phy, link_status, lane);
-}
-
 #define TRAIN_REQ_FMT "%d/%d/%d/%d"
 #define _TRAIN_REQ_VSWING_ARGS(link_status, lane) \
 	(drm_dp_get_adjust_request_voltage((link_status), (lane)) >> DP_TRAIN_VOLTAGE_SWING_SHIFT)
@@ -390,13 +355,6 @@
 	_TRAIN_REQ_PREEMPH_ARGS(link_status, 1), \
 	_TRAIN_REQ_PREEMPH_ARGS(link_status, 2), \
 	_TRAIN_REQ_PREEMPH_ARGS(link_status, 3)
-#define _TRAIN_REQ_TX_FFE_ARGS(link_status, lane) \
-	drm_dp_get_adjust_tx_ffe_preset((link_status), (lane))
-#define TRAIN_REQ_TX_FFE_ARGS(link_status) \
-	_TRAIN_REQ_TX_FFE_ARGS(link_status, 0), \
-	_TRAIN_REQ_TX_FFE_ARGS(link_status, 1), \
-	_TRAIN_REQ_TX_FFE_ARGS(link_status, 2), \
-	_TRAIN_REQ_TX_FFE_ARGS(link_status, 3)
 
 void
 intel_dp_get_adjust_train(struct intel_dp *intel_dp,
@@ -409,23 +367,14 @@
 	char phy_name[10];
 	int lane;
 
-	if (intel_dp_is_uhbr(crtc_state)) {
-		drm_dbg_kms(&i915->drm, "[ENCODER:%d:%s][%s] 128b/132b, lanes: %d, "
-			    "TX FFE request: " TRAIN_REQ_FMT "\n",
-			    encoder->base.base.id, encoder->base.name,
-			    intel_dp_phy_name(dp_phy, phy_name, sizeof(phy_name)),
-			    crtc_state->lane_count,
-			    TRAIN_REQ_TX_FFE_ARGS(link_status));
-	} else {
-		drm_dbg_kms(&i915->drm, "[ENCODER:%d:%s][%s] 8b/10b, lanes: %d, "
-			    "vswing request: " TRAIN_REQ_FMT ", "
-			    "pre-emphasis request: " TRAIN_REQ_FMT "\n",
-			    encoder->base.base.id, encoder->base.name,
-			    intel_dp_phy_name(dp_phy, phy_name, sizeof(phy_name)),
-			    crtc_state->lane_count,
-			    TRAIN_REQ_VSWING_ARGS(link_status),
-			    TRAIN_REQ_PREEMPH_ARGS(link_status));
-	}
+	drm_dbg_kms(&i915->drm, "[ENCODER:%d:%s][%s] lanes: %d, "
+		    "vswing request: " TRAIN_REQ_FMT ", "
+		    "pre-emphasis request: " TRAIN_REQ_FMT "\n",
+		    encoder->base.base.id, encoder->base.name,
+		    intel_dp_phy_name(dp_phy, phy_name, sizeof(phy_name)),
+		    crtc_state->lane_count,
+		    TRAIN_REQ_VSWING_ARGS(link_status),
+		    TRAIN_REQ_PREEMPH_ARGS(link_status));
 
 	for (lane = 0; lane < 4; lane++)
 		intel_dp->train_set[lane] =
@@ -515,13 +464,6 @@
 	_TRAIN_SET_PREEMPH_ARGS((train_set)[1]), \
 	_TRAIN_SET_PREEMPH_ARGS((train_set)[2]), \
 	_TRAIN_SET_PREEMPH_ARGS((train_set)[3])
-#define _TRAIN_SET_TX_FFE_ARGS(train_set) \
-	((train_set) & DP_TX_FFE_PRESET_VALUE_MASK), ""
-#define TRAIN_SET_TX_FFE_ARGS(train_set) \
-	_TRAIN_SET_TX_FFE_ARGS((train_set)[0]), \
-	_TRAIN_SET_TX_FFE_ARGS((train_set)[1]), \
-	_TRAIN_SET_TX_FFE_ARGS((train_set)[2]), \
-	_TRAIN_SET_TX_FFE_ARGS((train_set)[3])
 
 void intel_dp_set_signal_levels(struct intel_dp *intel_dp,
 				const struct intel_crtc_state *crtc_state,
@@ -531,23 +473,14 @@
 	struct drm_i915_private *i915 = to_i915(encoder->base.dev);
 	char phy_name[10];
 
-	if (intel_dp_is_uhbr(crtc_state)) {
-		drm_dbg_kms(&i915->drm, "[ENCODER:%d:%s][%s] 128b/132b, lanes: %d, "
-			    "TX FFE presets: " TRAIN_SET_FMT "\n",
-			    encoder->base.base.id, encoder->base.name,
-			    intel_dp_phy_name(dp_phy, phy_name, sizeof(phy_name)),
-			    crtc_state->lane_count,
-			    TRAIN_SET_TX_FFE_ARGS(intel_dp->train_set));
-	} else {
-		drm_dbg_kms(&i915->drm, "[ENCODER:%d:%s][%s] 8b/10b, lanes: %d, "
-			    "vswing levels: " TRAIN_SET_FMT ", "
-			    "pre-emphasis levels: " TRAIN_SET_FMT "\n",
-			    encoder->base.base.id, encoder->base.name,
-			    intel_dp_phy_name(dp_phy, phy_name, sizeof(phy_name)),
-			    crtc_state->lane_count,
-			    TRAIN_SET_VSWING_ARGS(intel_dp->train_set),
-			    TRAIN_SET_PREEMPH_ARGS(intel_dp->train_set));
-	}
+	drm_dbg_kms(&i915->drm, "[ENCODER:%d:%s][%s] lanes: %d, "
+		    "vswing levels: " TRAIN_SET_FMT ", "
+		    "pre-emphasis levels: " TRAIN_SET_FMT "\n",
+		    encoder->base.base.id, encoder->base.name,
+		    intel_dp_phy_name(dp_phy, phy_name, sizeof(phy_name)),
+		    crtc_state->lane_count,
+		    TRAIN_SET_VSWING_ARGS(intel_dp->train_set),
+		    TRAIN_SET_PREEMPH_ARGS(intel_dp->train_set));
 
 	if (intel_dp_phy_is_downstream_of_source(intel_dp, dp_phy))
 		encoder->set_signal_levels(encoder, crtc_state);
@@ -582,16 +515,7 @@
 	return ret == crtc_state->lane_count;
 }
 
-/* 128b/132b */
-static bool intel_dp_lane_max_tx_ffe_reached(u8 train_set_lane)
-{
-	return (train_set_lane & DP_TX_FFE_PRESET_VALUE_MASK) ==
-		DP_TX_FFE_PRESET_VALUE_MASK;
-}
-
 /*
- * 8b/10b
- *
  * FIXME: The DP spec is very confusing here, also the Link CTS spec seems to
  * have self contradicting tests around this area.
  *
@@ -621,15 +545,8 @@
 	int lane;
 
 	for (lane = 0; lane < crtc_state->lane_count; lane++) {
-		u8 train_set_lane = intel_dp->train_set[lane];
-
-		if (intel_dp_is_uhbr(crtc_state)) {
-			if (!intel_dp_lane_max_tx_ffe_reached(train_set_lane))
-				return false;
-		} else {
-			if (!intel_dp_lane_max_vswing_reached(train_set_lane))
-				return false;
-		}
+		if (!intel_dp_lane_max_vswing_reached(intel_dp->train_set[lane]))
+			return false;
 	}
 
 	return true;
@@ -692,24 +609,17 @@
 		drm_dp_lttpr_link_train_clock_recovery_delay();
 }
 
-static bool intel_dp_adjust_request_changed(const struct intel_crtc_state *crtc_state,
+static bool intel_dp_adjust_request_changed(int lane_count,
 					    const u8 old_link_status[DP_LINK_STATUS_SIZE],
 					    const u8 new_link_status[DP_LINK_STATUS_SIZE])
 {
 	int lane;
 
-	for (lane = 0; lane < crtc_state->lane_count; lane++) {
-		u8 old, new;
-
-		if (intel_dp_is_uhbr(crtc_state)) {
-			old = drm_dp_get_adjust_tx_ffe_preset(old_link_status, lane);
-			new = drm_dp_get_adjust_tx_ffe_preset(new_link_status, lane);
-		} else {
-			old = drm_dp_get_adjust_request_voltage(old_link_status, lane) |
-				drm_dp_get_adjust_request_pre_emphasis(old_link_status, lane);
-			new = drm_dp_get_adjust_request_voltage(new_link_status, lane) |
-				drm_dp_get_adjust_request_pre_emphasis(new_link_status, lane);
-		}
+	for (lane = 0; lane < lane_count; lane++) {
+		u8 old = drm_dp_get_adjust_request_voltage(old_link_status, lane) |
+			drm_dp_get_adjust_request_pre_emphasis(old_link_status, lane);
+		u8 new = drm_dp_get_adjust_request_voltage(new_link_status, lane) |
+			drm_dp_get_adjust_request_pre_emphasis(new_link_status, lane);
 
 		if (old != new)
 			return true;
@@ -819,7 +729,8 @@
 			return false;
 		}
 
-		if (!intel_dp_adjust_request_changed(crtc_state, old_link_status, link_status))
+		if (!intel_dp_adjust_request_changed(crtc_state->lane_count,
+						     old_link_status, link_status))
 			++voltage_tries;
 		else
 			voltage_tries = 1;
diff -Naur linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/display/intel_dp_mst.c i915-sriov-5.15/drivers/gpu/drm/i915/display/intel_dp_mst.c
--- linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/display/intel_dp_mst.c	2022-11-07 16:35:36.000000000 +0800
+++ i915-sriov-5.15/drivers/gpu/drm/i915/display/intel_dp_mst.c	2023-04-03 16:58:20.450867766 +0800
@@ -368,7 +368,7 @@
 
 	drm_dp_mst_reset_vcpi_slots(&intel_dp->mst_mgr, connector->port);
 
-	ret = drm_dp_update_payload_part1(&intel_dp->mst_mgr, 1);
+	ret = drm_dp_update_payload_part1(&intel_dp->mst_mgr);
 	if (ret) {
 		drm_dbg_kms(&i915->drm, "failed to update payload %d\n", ret);
 	}
@@ -511,7 +511,7 @@
 
 	intel_dp->active_mst_links++;
 
-	ret = drm_dp_update_payload_part1(&intel_dp->mst_mgr, 1);
+	ret = drm_dp_update_payload_part1(&intel_dp->mst_mgr);
 
 	/*
 	 * Before Gen 12 this is not done as part of
diff -Naur linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/display/intel_hdmi.c i915-sriov-5.15/drivers/gpu/drm/i915/display/intel_hdmi.c
--- linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/display/intel_hdmi.c	2022-11-07 16:35:36.000000000 +0800
+++ i915-sriov-5.15/drivers/gpu/drm/i915/display/intel_hdmi.c	2023-04-03 17:07:37.768840228 +0800
@@ -1892,7 +1892,7 @@
 		if (ycbcr420_output)
 			return hdmi->y420_dc_modes & DRM_EDID_YCBCR420_DC_36;
 		else
-			return info->edid_hdmi_dc_modes & DRM_EDID_HDMI_DC_36;
+			return info->edid_hdmi_rgb444_dc_modes & DRM_EDID_HDMI_DC_36;
 	case 10:
 		if (DISPLAY_VER(i915) < 11)
 			return false;
@@ -1903,7 +1903,7 @@
 		if (ycbcr420_output)
 			return hdmi->y420_dc_modes & DRM_EDID_YCBCR420_DC_30;
 		else
-			return info->edid_hdmi_dc_modes & DRM_EDID_HDMI_DC_30;
+			return info->edid_hdmi_rgb444_dc_modes & DRM_EDID_HDMI_DC_30;
 	case 8:
 		return true;
 	default:
diff -Naur linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/display/intel_vga.c i915-sriov-5.15/drivers/gpu/drm/i915/display/intel_vga.c
--- linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/display/intel_vga.c	2022-11-07 16:35:36.000000000 +0800
+++ i915-sriov-5.15/drivers/gpu/drm/i915/display/intel_vga.c	2023-04-03 15:55:29.736190118 +0800
@@ -124,9 +124,9 @@
 }
 
 static unsigned int
-intel_vga_set_decode(void *cookie, bool enable_decode)
+intel_vga_set_decode(struct pci_dev *pdev, bool enable_decode)
 {
-	struct drm_i915_private *i915 = cookie;
+	struct drm_i915_private *i915 = pdev_to_i915(pdev);
 
 	intel_vga_set_state(i915, enable_decode);
 
@@ -150,7 +150,7 @@
 	 * then we do not take part in VGA arbitration and the
 	 * vga_client_register() fails with -ENODEV.
 	 */
-	ret = vga_client_register(pdev, i915, NULL, intel_vga_set_decode);
+	ret = vga_client_register(pdev, intel_vga_set_decode);
 	if (ret && ret != -ENODEV)
 		return ret;
 
@@ -161,5 +161,5 @@
 {
 	struct pci_dev *pdev = to_pci_dev(i915->drm.dev);
 
-	vga_client_register(pdev, NULL, NULL, NULL);
+	vga_client_unregister(pdev);
 }
diff -Naur linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/gem/i915_gem_internal.c i915-sriov-5.15/drivers/gpu/drm/i915/gem/i915_gem_internal.c
--- linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/gem/i915_gem_internal.c	2022-11-07 16:35:36.000000000 +0800
+++ i915-sriov-5.15/drivers/gpu/drm/i915/gem/i915_gem_internal.c	2023-04-03 15:18:55.567220247 +0800
@@ -42,7 +42,7 @@
 
 	max_order = MAX_ORDER;
 #ifdef CONFIG_SWIOTLB
-	if (swiotlb_nr_tbl()) {
+	if (is_swiotlb_active(obj->base.dev->dev)) {
 		unsigned int max_segment;
 
 		max_segment = swiotlb_max_segment();
diff -Naur linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/gem/i915_gem_ttm.c i915-sriov-5.15/drivers/gpu/drm/i915/gem/i915_gem_ttm.c
--- linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/gem/i915_gem_ttm.c	2022-11-07 16:35:36.000000000 +0800
+++ i915-sriov-5.15/drivers/gpu/drm/i915/gem/i915_gem_ttm.c	2023-04-03 15:25:02.638833930 +0800
@@ -517,7 +517,7 @@
 						 obj->ttm.cached_io_st,
 						 src_reg->region.start);
 
-		ttm_move_memcpy(clear, dst_mem->num_pages, dst_iter, src_iter);
+		ttm_move_memcpy(bo, dst_mem->num_pages, dst_iter, src_iter);
 	}
 }
 
diff -Naur linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/gt/intel_engine_user.c i915-sriov-5.15/drivers/gpu/drm/i915/gt/intel_engine_user.c
--- linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/gt/intel_engine_user.c	2022-11-07 16:35:36.000000000 +0800
+++ i915-sriov-5.15/drivers/gpu/drm/i915/gt/intel_engine_user.c	2023-04-03 15:13:45.740534069 +0800
@@ -50,7 +50,8 @@
 	[COMPUTE_CLASS] = I915_ENGINE_CLASS_COMPUTE,
 };
 
-static int engine_cmp(void *priv, struct list_head *A, struct list_head *B)
+static int engine_cmp(void *priv, const struct list_head *A,
+		      const struct list_head *B)
 {
 	const struct intel_engine_cs *a =
 		container_of((struct rb_node *)A, typeof(*a), uabi_node);
diff -Naur linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/i915_request.c i915-sriov-5.15/drivers/gpu/drm/i915/i915_request.c
--- linux-intel-lts-lts-v5.10.145-yocto-221108T131909Z/drivers/gpu/drm/i915/i915_request.c	2022-11-07 16:35:36.000000000 +0800
+++ i915-sriov-5.15/drivers/gpu/drm/i915/i915_request.c	2023-04-03 15:48:17.638975367 +0800
@@ -166,7 +166,7 @@
 
 	llist_for_each_entry_safe(cb, cn,
 				  llist_del_all(&rq->execute_cb),
-				  work.llnode)
+				  work.node.llist)
 		fn(&cb->work);
 }
 
@@ -479,7 +479,7 @@
 	 * callback first, then checking the ACTIVE bit, we serialise with
 	 * the completed/retired request.
 	 */
-	if (llist_add(&cb->work.llnode, &signal->execute_cb)) {
+	if (llist_add(&cb->work.node.llist, &signal->execute_cb)) {
 		if (i915_request_is_active(signal) ||
 		    __request_in_flight(signal))
 			i915_request_notify_execute_cb_imm(signal);
@@ -1541,14 +1541,38 @@
 			  struct drm_i915_gem_object *obj,
 			  bool write)
 {
-	struct dma_resv_iter cursor;
-	struct dma_fence *fence;
+	struct dma_fence *excl;
 	int ret = 0;
 
-	dma_resv_for_each_fence(&cursor, obj->base.resv, write, fence) {
-		ret = i915_request_await_dma_fence(to, fence);
+	if (write) {
+		struct dma_fence **shared;
+		unsigned int count, i;
+
+		ret = dma_resv_get_fences(obj->base.resv, &excl, &count,
+					  &shared);
 		if (ret)
-			break;
+			return ret;
+
+		for (i = 0; i < count; i++) {
+			ret = i915_request_await_dma_fence(to, shared[i]);
+			if (ret)
+				break;
+
+			dma_fence_put(shared[i]);
+		}
+
+		for (; i < count; i++)
+			dma_fence_put(shared[i]);
+		kfree(shared);
+	} else {
+		excl = dma_resv_get_excl_unlocked(obj->base.resv);
+	}
+
+	if (excl) {
+		if (ret == 0)
+			ret = i915_request_await_dma_fence(to, excl);
+
+		dma_fence_put(excl);
 	}
 
 	return ret;
